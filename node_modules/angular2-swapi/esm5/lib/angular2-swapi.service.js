/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var Angular2SwapiService = /** @class */ (function () {
    function Angular2SwapiService(_http) {
        this._http = _http;
        this.TAG = 'Angular2 Swapi Service : ';
        this.swapiUrl = 'https://swapi.co/api/';
    }
    /**
     * Add page value url param
     */
    /**
     * Add page value url param
     * @param {?} page
     * @return {?}
     */
    Angular2SwapiService.prototype.getByPage = /**
     * Add page value url param
     * @param {?} page
     * @return {?}
     */
    function (page) {
        if (page) {
            return '&page=' + page;
        }
        else {
            return '';
        }
    };
    /**
     * Return list of people as observable
     */
    /**
     * Return list of people as observable
     * @param {?=} page
     * @return {?}
     */
    Angular2SwapiService.prototype.getPeople = /**
     * Return list of people as observable
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        return this._http.get(this.swapiUrl + "people?format=json" + this.getByPage(page))
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return people by id
     */
    /**
     * Return people by id
     * @param {?} id
     * @return {?}
     */
    Angular2SwapiService.prototype.getPeopleById = /**
     * Return people by id
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._http.get(this.swapiUrl + "people/" + id + "?format=json")
            .pipe(catchError(this.handleError));
    };
    /**
     * Search people by name
     */
    /**
     * Search people by name
     * @param {?} name
     * @return {?}
     */
    Angular2SwapiService.prototype.searchPeople = /**
     * Search people by name
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this._http.get(this.swapiUrl + "people?search=" + name)
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return list of films as observable
     */
    /**
     * Return list of films as observable
     * @param {?=} page
     * @return {?}
     */
    Angular2SwapiService.prototype.getFilms = /**
     * Return list of films as observable
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        return this._http.get(this.swapiUrl + "films?format=json" + this.getByPage(page))
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return film by id
     */
    /**
     * Return film by id
     * @param {?} id
     * @return {?}
     */
    Angular2SwapiService.prototype.getFilm = /**
     * Return film by id
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._http.get(this.swapiUrl + "films/" + id + "?format=json")
            .pipe(catchError(this.handleError));
    };
    /**
     * Search films by title
     */
    /**
     * Search films by title
     * @param {?} title
     * @return {?}
     */
    Angular2SwapiService.prototype.searchFilms = /**
     * Search films by title
     * @param {?} title
     * @return {?}
     */
    function (title) {
        return this._http.get(this.swapiUrl + "films?search=" + title)
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return list of starships
     */
    /**
     * Return list of starships
     * @param {?=} page
     * @return {?}
     */
    Angular2SwapiService.prototype.getStarships = /**
     * Return list of starships
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        return this._http.get(this.swapiUrl + "starships?format=json" + this.getByPage(page))
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return starship by id
     */
    /**
     * Return starship by id
     * @param {?} id
     * @return {?}
     */
    Angular2SwapiService.prototype.getStarship = /**
     * Return starship by id
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._http.get(this.swapiUrl + "starships/" + id + "?format=json")
            .pipe(catchError(this.handleError));
    };
    /**
     * Search starships by name
     */
    /**
     * Search starships by name
     * @param {?} name
     * @return {?}
     */
    Angular2SwapiService.prototype.searchStarships = /**
     * Search starships by name
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this._http.get(this.swapiUrl + "starships?search=" + name)
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return list of vehicles as observable
     */
    /**
     * Return list of vehicles as observable
     * @param {?=} page
     * @return {?}
     */
    Angular2SwapiService.prototype.getVehicles = /**
     * Return list of vehicles as observable
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        return this._http.get(this.swapiUrl + "vehicles?format=json" + this.getByPage(page))
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return vehicle by id
     */
    /**
     * Return vehicle by id
     * @param {?} id
     * @return {?}
     */
    Angular2SwapiService.prototype.getVehicle = /**
     * Return vehicle by id
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._http.get(this.swapiUrl + "vehicles/" + id + "?format=json")
            .pipe(catchError(this.handleError));
    };
    /**
     * Search vehicles by name
     */
    /**
     * Search vehicles by name
     * @param {?} name
     * @return {?}
     */
    Angular2SwapiService.prototype.searchVehicles = /**
     * Search vehicles by name
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this._http.get(this.swapiUrl + "vehicles?search=" + name)
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Retrun list of species as observable
     */
    /**
     * Retrun list of species as observable
     * @param {?=} page
     * @return {?}
     */
    Angular2SwapiService.prototype.getSpecies = /**
     * Retrun list of species as observable
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        return this._http.get(this.swapiUrl + "species?format=json" + this.getByPage(page))
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return species by id
     */
    /**
     * Return species by id
     * @param {?} id
     * @return {?}
     */
    Angular2SwapiService.prototype.getSpeciesById = /**
     * Return species by id
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._http.get(this.swapiUrl + "species/" + id + "?format=json")
            .pipe(catchError(this.handleError));
    };
    /**
     * Search species by name
     */
    /**
     * Search species by name
     * @param {?} name
     * @return {?}
     */
    Angular2SwapiService.prototype.searchSpecies = /**
     * Search species by name
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this._http.get(this.swapiUrl + "species?search=" + name)
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     *  Return list od planets as observable
     */
    /**
     *  Return list od planets as observable
     * @param {?=} page
     * @return {?}
     */
    Angular2SwapiService.prototype.getPlanets = /**
     *  Return list od planets as observable
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        return this._http.get(this.swapiUrl + "planets?format=json" + this.getByPage(page))
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Return planet by id
     */
    /**
     * Return planet by id
     * @param {?} id
     * @return {?}
     */
    Angular2SwapiService.prototype.getPlanet = /**
     * Return planet by id
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._http.get(this.swapiUrl + "planets/" + id + "?format=json")
            .pipe(catchError(this.handleError));
    };
    /**
     * Search planets by name
     */
    /**
     * Search planets by name
     * @param {?} name
     * @return {?}
     */
    Angular2SwapiService.prototype.searchPlanets = /**
     * Search planets by name
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this._http.get(this.swapiUrl + "planets?search=" + name)
            .pipe(map(function (resp) { return resp['results']; }), catchError(this.handleError));
    };
    /**
     * Handle HTTP Errors
     * @param {?} error
     * @return {?}
     */
    Angular2SwapiService.prototype.handleError = /**
     * Handle HTTP Errors
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            console.error(this.TAG + " An error occurred:", error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            console.error(this.TAG + " Backend returned code " + error.status + ", " +
                ("body was: " + error.error));
        }
        // return an observable with a user-facing error message
        return throwError(this.TAG + " Something bad happened; please try again later.");
    };
    Angular2SwapiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    Angular2SwapiService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ Angular2SwapiService.ngInjectableDef = i0.defineInjectable({ factory: function Angular2SwapiService_Factory() { return new Angular2SwapiService(i0.inject(i1.HttpClient)); }, token: Angular2SwapiService, providedIn: "root" });
    return Angular2SwapiService;
}());
export { Angular2SwapiService };
function Angular2SwapiService_tsickle_Closure_declarations() {
    /** @type {?} */
    Angular2SwapiService.prototype.TAG;
    /** @type {?} */
    Angular2SwapiService.prototype.swapiUrl;
    /** @type {?} */
    Angular2SwapiService.prototype._http;
}

//# sourceMappingURL=data:application/json;base64,