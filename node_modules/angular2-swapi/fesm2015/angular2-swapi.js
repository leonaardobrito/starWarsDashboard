import { Injectable, Component, NgModule, defineInjectable, inject } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Angular2SwapiService {
    /**
     * @param {?} _http
     */
    constructor(_http) {
        this._http = _http;
        this.TAG = 'Angular2 Swapi Service : ';
        this.swapiUrl = 'https://swapi.co/api/';
    }
    /**
     * Add page value url param
     * @param {?} page
     * @return {?}
     */
    getByPage(page) {
        if (page) {
            return '&page=' + page;
        }
        else {
            return '';
        }
    }
    /**
     * Return list of people as observable
     * @param {?=} page
     * @return {?}
     */
    getPeople(page) {
        return this._http.get(`${this.swapiUrl}people?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return people by id
     * @param {?} id
     * @return {?}
     */
    getPeopleById(id) {
        return this._http.get(`${this.swapiUrl}people/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search people by name
     * @param {?} name
     * @return {?}
     */
    searchPeople(name) {
        return this._http.get(`${this.swapiUrl}people?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return list of films as observable
     * @param {?=} page
     * @return {?}
     */
    getFilms(page) {
        return this._http.get(`${this.swapiUrl}films?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return film by id
     * @param {?} id
     * @return {?}
     */
    getFilm(id) {
        return this._http.get(`${this.swapiUrl}films/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search films by title
     * @param {?} title
     * @return {?}
     */
    searchFilms(title) {
        return this._http.get(`${this.swapiUrl}films?search=${title}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return list of starships
     * @param {?=} page
     * @return {?}
     */
    getStarships(page) {
        return this._http.get(`${this.swapiUrl}starships?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return starship by id
     * @param {?} id
     * @return {?}
     */
    getStarship(id) {
        return this._http.get(`${this.swapiUrl}starships/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search starships by name
     * @param {?} name
     * @return {?}
     */
    searchStarships(name) {
        return this._http.get(`${this.swapiUrl}starships?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return list of vehicles as observable
     * @param {?=} page
     * @return {?}
     */
    getVehicles(page) {
        return this._http.get(`${this.swapiUrl}vehicles?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return vehicle by id
     * @param {?} id
     * @return {?}
     */
    getVehicle(id) {
        return this._http.get(`${this.swapiUrl}vehicles/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search vehicles by name
     * @param {?} name
     * @return {?}
     */
    searchVehicles(name) {
        return this._http.get(`${this.swapiUrl}vehicles?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Retrun list of species as observable
     * @param {?=} page
     * @return {?}
     */
    getSpecies(page) {
        return this._http.get(`${this.swapiUrl}species?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return species by id
     * @param {?} id
     * @return {?}
     */
    getSpeciesById(id) {
        return this._http.get(`${this.swapiUrl}species/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search species by name
     * @param {?} name
     * @return {?}
     */
    searchSpecies(name) {
        return this._http.get(`${this.swapiUrl}species?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     *  Return list od planets as observable
     * @param {?=} page
     * @return {?}
     */
    getPlanets(page) {
        return this._http.get(`${this.swapiUrl}planets?format=json${this.getByPage(page)}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Return planet by id
     * @param {?} id
     * @return {?}
     */
    getPlanet(id) {
        return this._http.get(`${this.swapiUrl}planets/${id}?format=json`)
            .pipe(catchError(this.handleError));
    }
    /**
     * Search planets by name
     * @param {?} name
     * @return {?}
     */
    searchPlanets(name) {
        return this._http.get(`${this.swapiUrl}planets?search=${name}`)
            .pipe(map(resp => resp['results']), catchError(this.handleError));
    }
    /**
     * Handle HTTP Errors
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            console.error(`${this.TAG} An error occurred:`, error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            console.error(`${this.TAG} Backend returned code ${error.status}, ` +
                `body was: ${error.error}`);
        }
        // return an observable with a user-facing error message
        return throwError(`${this.TAG} Something bad happened; please try again later.`);
    }
}
Angular2SwapiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
Angular2SwapiService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ Angular2SwapiService.ngInjectableDef = defineInjectable({ factory: function Angular2SwapiService_Factory() { return new Angular2SwapiService(inject(HttpClient)); }, token: Angular2SwapiService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Angular2SwapiComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
Angular2SwapiComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-angular2-swapi',
                template: `
    <p>
      angular2-swapi works!
    </p>
  `,
                styles: []
            },] },
];
/** @nocollapse */
Angular2SwapiComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Angular2SwapiModule {
}
Angular2SwapiModule.decorators = [
    { type: NgModule, args: [{
                imports: [HttpClientModule],
                declarations: [Angular2SwapiComponent],
                exports: [Angular2SwapiComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { Angular2SwapiService, Angular2SwapiComponent, Angular2SwapiModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,