{"version":3,"sources":["ng://angular2-swapi/lib/angular2-swapi.service.ts","ng://angular2-swapi/lib/angular2-swapi.component.ts","ng://angular2-swapi/lib/angular2-swapi.module.ts"],"names":["Angular2SwapiService","_http","this","prototype","getByPage","page","getPeople","get","swapiUrl","pipe","map","resp","catchError","handleError","getPeopleById","id","searchPeople","name","getFilms","getFilm","searchFilms","title","getStarships","getStarship","searchStarships","getVehicles","getVehicle","searchVehicles","getSpecies","getSpeciesById","searchSpecies","getPlanets","getPlanet","searchPlanets","error","ErrorEvent","console","TAG","message","status","throwError","Injectable","args","providedIn","HttpClient","Angular2SwapiComponent","ngOnInit","Component","selector","template","styles","Angular2SwapiModule","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError  } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { People, Film, Starship, Vehicle, Species, Planet } from './angular2-swapi.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Angular2SwapiService {\n\n  TAG = 'Angular2 Swapi Service : ';\n  swapiUrl = 'https://swapi.co/api/';\n\n  constructor(private _http: HttpClient) { }\n\n  /**\n   * Add page value url param\n   */\n  getByPage(page: number): string {\n    if (page) { return '&page=' + page; } else { return ''; }\n  }\n\n  /**\n   * Return list of people as observable\n   */\n  getPeople(page?: number): Observable<People[]> {\n    return this._http.get<People[]>(`${this.swapiUrl}people?format=json${this.getByPage(page)}`)\n              .pipe(\n                map(resp => resp['results']),\n                catchError(this.handleError)\n              );\n  }\n\n  /**\n   * Return people by id\n   */\n  getPeopleById(id: number): Observable<People> {\n    return this._http.get<People>(`${this.swapiUrl}people/${id}?format=json`)\n              .pipe(\n                catchError(this.handleError)\n              );\n  }\n\n  /**\n   * Search people by name\n   */\n  searchPeople(name: string): Observable<People[]> {\n    return this._http.get<People[]>(`${this.swapiUrl}people?search=${name}`)\n              .pipe(\n                map(resp => resp['results']),\n                catchError(this.handleError)\n              );\n  }\n\n  /**\n   * Return list of films as observable\n   */\n  getFilms(page?: number): Observable<Film[]> {\n    return this._http.get<Film[]>(`${this.swapiUrl}films?format=json${this.getByPage(page)}`)\n              .pipe(\n                map(resp => resp['results']),\n                catchError(this.handleError)\n              );\n  }\n\n  /**\n   * Return film by id\n   */\n  getFilm(id: number): Observable<Film> {\n    return this._http.get<Film>(`${this.swapiUrl}films/${id}?format=json`)\n              .pipe(\n                catchError(this.handleError)\n              );\n  }\n\n  /**\n   * Search films by title\n   */\n  searchFilms(title: string): Observable<Film[]> {\n    return this._http.get<Film[]>(`${this.swapiUrl}films?search=${title}`)\n    .pipe(\n      map(resp => resp['results']),\n      catchError(this.handleError)\n    );\n  }\n\n/**\n * Return list of starships\n */\ngetStarships(page?: number): Observable<Starship[]> {\n    return this._http.get<Starship[]>(`${this.swapiUrl}starships?format=json${this.getByPage(page)}`)\n    .pipe(\n      map(resp => resp['results']),\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Return starship by id\n   */\n  getStarship(id: number): Observable<Starship> {\n    return this._http.get<Starship>(`${this.swapiUrl}starships/${id}?format=json`)\n    .pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Search starships by name\n   */\n  searchStarships(name: string): Observable<Starship[]> {\n    return this._http.get<Starship[]>(`${this.swapiUrl}starships?search=${name}`)\n    .pipe(\n      map(resp => resp['results']),\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Return list of vehicles as observable\n   */\n  getVehicles(page?: number): Observable<Vehicle[]> {\n    return this._http.get<Vehicle[]>(`${this.swapiUrl}vehicles?format=json${this.getByPage(page)}`)\n      .pipe(\n        map(resp => resp['results']),\n        catchError(this.handleError)\n      );\n    }\n\n  /**\n   * Return vehicle by id\n   */\n  getVehicle(id: number): Observable<Vehicle> {\n    return this._http.get<Vehicle>(`${this.swapiUrl}vehicles/${id}?format=json`)\n    .pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Search vehicles by name\n   */\n  searchVehicles(name: string): Observable<Vehicle[]> {\n    return this._http.get<Vehicle[]>(`${this.swapiUrl}vehicles?search=${name}`)\n    .pipe(\n      map(resp => resp['results']),\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Retrun list of species as observable\n   */\n  getSpecies(page?: number): Observable<Species[]> {\n    return this._http.get<Species[]>(`${this.swapiUrl}species?format=json${this.getByPage(page)}`)\n      .pipe(\n        map(resp => resp['results']),\n        catchError(this.handleError)\n      );\n    }\n\n  /**\n   * Return species by id\n   */\n  getSpeciesById(id: number): Observable<Species> {\n    return this._http.get<Species>(`${this.swapiUrl}species/${id}?format=json`)\n    .pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Search species by name\n   */\n  searchSpecies(name: string): Observable<Species[]> {\n    return this._http.get<Species[]>(`${this.swapiUrl}species?search=${name}`)\n    .pipe(\n      map(resp => resp['results']),\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   *  Return list od planets as observable\n   */\n  getPlanets(page?: number): Observable<Planet[]> {\n    return this._http.get<Planet[]>(`${this.swapiUrl}planets?format=json${this.getByPage(page)}`)\n      .pipe(\n        map(resp => resp['results']),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Return planet by id\n   */\n  getPlanet(id: number): Observable<Planet> {\n    return this._http.get<Planet>(`${this.swapiUrl}planets/${id}?format=json`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Search planets by name\n   */\n  searchPlanets(name: string): Observable<Planet[]> {\n    return this._http.get<Planet[]>(`${this.swapiUrl}planets?search=${name}`)\n    .pipe(\n      map(resp => resp['results']),\n      catchError(this.handleError)\n    );\n  }\n\n  /**\n   * Handle HTTP Errors\n   */\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error(`${this.TAG} An error occurred:`, error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `${this.TAG} Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    return throwError(\n      `${this.TAG} Something bad happened; please try again later.`);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-angular2-swapi',\n  template: `\n    <p>\n      angular2-swapi works!\n    </p>\n  `,\n  styles: []\n})\nexport class Angular2SwapiComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Angular2SwapiComponent } from './angular2-swapi.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [Angular2SwapiComponent],\n  exports: [Angular2SwapiComponent]\n})\nexport class Angular2SwapiModule { }\n"]}