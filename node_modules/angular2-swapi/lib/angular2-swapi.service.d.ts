import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { People, Film, Starship, Vehicle, Species, Planet } from './angular2-swapi.models';
export declare class Angular2SwapiService {
    private _http;
    TAG: string;
    swapiUrl: string;
    constructor(_http: HttpClient);
    /**
     * Add page value url param
     */
    getByPage(page: number): string;
    /**
     * Return list of people as observable
     */
    getPeople(page?: number): Observable<People[]>;
    /**
     * Return people by id
     */
    getPeopleById(id: number): Observable<People>;
    /**
     * Search people by name
     */
    searchPeople(name: string): Observable<People[]>;
    /**
     * Return list of films as observable
     */
    getFilms(page?: number): Observable<Film[]>;
    /**
     * Return film by id
     */
    getFilm(id: number): Observable<Film>;
    /**
     * Search films by title
     */
    searchFilms(title: string): Observable<Film[]>;
    /**
     * Return list of starships
     */
    getStarships(page?: number): Observable<Starship[]>;
    /**
     * Return starship by id
     */
    getStarship(id: number): Observable<Starship>;
    /**
     * Search starships by name
     */
    searchStarships(name: string): Observable<Starship[]>;
    /**
     * Return list of vehicles as observable
     */
    getVehicles(page?: number): Observable<Vehicle[]>;
    /**
     * Return vehicle by id
     */
    getVehicle(id: number): Observable<Vehicle>;
    /**
     * Search vehicles by name
     */
    searchVehicles(name: string): Observable<Vehicle[]>;
    /**
     * Retrun list of species as observable
     */
    getSpecies(page?: number): Observable<Species[]>;
    /**
     * Return species by id
     */
    getSpeciesById(id: number): Observable<Species>;
    /**
     * Search species by name
     */
    searchSpecies(name: string): Observable<Species[]>;
    /**
     *  Return list od planets as observable
     */
    getPlanets(page?: number): Observable<Planet[]>;
    /**
     * Return planet by id
     */
    getPlanet(id: number): Observable<Planet>;
    /**
     * Search planets by name
     */
    searchPlanets(name: string): Observable<Planet[]>;
    /**
     * Handle HTTP Errors
     */
    private handleError(error);
}
